<%!
    /**
     * Wrappers are preinitialized Java objects that provide easy access to 
     * various settings within the bundle.  The Bundle wrapper contains methods 
     * to retrieve various path variables that can be used in any JSP page.
     *
     * bundle.applicationPath()
     *   Returns the URL path to the root of the web application.
     *   Example: "/kinetic/"
     * bundle.bundlePath()
     *   Returns the URL path to the root of the bundle.
     *   Example: "/kinetic/themes/BUNDLE_NAME/"
     * bundle.packagePath()
     *   Returns the URL path to the root of a package within the bundle.
     *   Example: "/kinetic/themes/BUNDLE_NAME/packages/PACKAGE_NAME/"
     * bundle.bundlePath()
     *   Returns the relative URL path to the root of the bundle within the 
     *   context of the web application.
     *   Example: "/kinetic/themes/BUNDLE_NAME/"
     * bundle.packagePath()
     *   Returns the relative URL path to the root of the package within the 
     *   context of the web application.
     *   Example: "/kinetic/themes/BUNDLE_NAME/packages/PACKAGE_NAME/"
     */
    public static class Bundle {
        // Define the static configuration values
        private static final String BUNDLE_DIR = "themes";
        // Initialize the properties hash
        private java.util.Map<String,String> properties = new java.util.TreeMap();
        // Declare the path variables
        private String applicationPath;
        private String bundlePath;
        private String packagePath;
        private String relativeBundlePath;
        private String relativePackagePath;

        /**
         * Given the ServletRequest object, this constructor calculates the
         * fully qualified and relative paths used by the Bundle.
         */
        public Bundle(HttpServletRequest request) {
            // Retrieve the URI of the request.  This is the actual URI of the
            // JSP that is being rendered, not the URL of the Servlet that is
            // dispatching the request.
            String requestUri = request.getRequestURI();
            // Calculate the terminating indexes
            int endOfRootPath = requestUri.indexOf("/"+BUNDLE_DIR);
            int startOfBundleName = requestUri.indexOf("/"+BUNDLE_DIR+"/")+("/"+BUNDLE_DIR+"/").length();
            int endOfBundleName = requestUri.indexOf("/", startOfBundleName);
            String packagesPath = requestUri.substring(0, endOfBundleName) + "/packages/";
            int startOfPackageName = requestUri.indexOf(packagesPath)+packagesPath.length();
            int endOfPackageName = requestUri.indexOf("/", startOfPackageName);
            // Set the paths
            this.applicationPath = requestUri.substring(0, endOfRootPath)+"/";
            this.bundlePath = requestUri.substring(0, endOfBundleName)+"/";
            this.packagePath = requestUri.substring(0, endOfPackageName)+"/";
            // Set the Relative paths
            this.relativeBundlePath = this.bundlePath.substring(this.applicationPath.length());
            this.relativePackagePath = this.packagePath.substring(this.applicationPath.length());
        }

        /***********************************************************************
         * PROPERTY CONFIGURATION METHODS
         **********************************************************************/

        /**
         * Retrieves the specified property value.  This value may be null if
         * a property with that name has not been configured.
         */
        public String getProperty(String name) {return properties.get(name);}

        /**
         * Returns the collection of property keys.
         */
        public java.util.Set<String> propertyNames() {return properties.keySet();}

        /**
         * Sets the value of a configuration property.
         */
        public void setProperty(String name, String value) {properties.put(name, value);}

        /***********************************************************************
         * PATH METHODS
         **********************************************************************/

        /**
         * Returns the URL path to the root of the web application.
         *
         * Note that the path string does not end with a '/'.  Paths that
         * concatenate values with this value should ensure the appended path
         * starts with a '/'.
         *
         * Example (assuming a default Kinetic SR installation):
         *   /kinetic
         * Example (assuming Kinetic SR was installed to an alternate location):
         *   /services/portfolio
         */
        public String applicationPath() { return applicationPath; }

        /**
         * Returns the URL path to the root of the bundle.
         *
         * Note that the path string does not end with a '/'.  Paths that
         * concatenate values with this value should ensure the appended path
         * starts with a '/'.
         *
         * Example (assuming a default Kinetic SR installation):
         *   /kinetic/themes/BUNDLE_NAME
         * Example (assuming Kinetic SR was installed to an alternate location):
         *   /services/portfolio/themes/BUNDLE_NAME
         */
        public String bundlePath() { return bundlePath; }

        /**
         * Returns the URL path to the root of the package.
         *
         * Note that the path string does not end with a '/'.  Paths that
         * concatenate values with this value should ensure the appended path
         * starts with a '/'.
         *
         * Example (assuming a default Kinetic SR installation):
         *   /kinetic/themes/BUNDLE_NAME/packages/PACKAGE_NAME
         * Example (assuming Kinetic SR was installed to an alternate location):
         *   /services/portfolio/themes/BUNDLE_NAME/packages/PACKAGE_NAME
         */
        public String packagePath() { return packagePath; }

        /**
         * Returns the URL path to the bundle within the context of web
         * application.
         *
         * Note that the path string does not end with a '/'.  Paths that
         * concatenate values with this value should ensure the appended path
         * starts with a '/'.
         *
         * Example:
         *   /themes/BUNDLE_NAME
         */
        public String relativeBundlePath() { return relativeBundlePath; }

        /**
         * Returns the URL path to the package path within the context of web
         * application.
         *
         * Note that the path string does not end with a '/'.  Paths that
         * concatenate values with this value should ensure the appended path
         * starts with a '/'.
         *
         * Example:
         *   /themes/BUNDLE_NAME/packages/PACKAGE_NAME
         */
        public String relativePackagePath() { return relativePackagePath; }
    }
%>